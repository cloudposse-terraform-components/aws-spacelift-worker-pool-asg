name: "aws-spacelift-worker-pool-asg"
# Canonical GitHub repo
github_repo: "cloudposse-terraform-components/aws-spacelift-worker-pool-asg"
# Short description of this project
description: |-
  This component provisions Spacelift worker pools on AWS using an Auto Scaling Group.

  By default, workers are granted pull access to the configured ECR and permission to assume the `spacelift` team role in the identity account (ensure the `spacelift` team in the identity account allows this via `trusted_role_arns`). Workers also get these AWS managed IAM policies:

  - AmazonSSMManagedInstanceCore
  - AutoScalingReadOnlyAccess
  - AWSXRayDaemonWriteAccess
  - CloudWatchAgentServerPolicy

  With SSM agent installed, workers can be accessed via SSM Session Manager.
usage: |-
  **Stack Level**: Regional

  Here's an example snippet for how to use this component.

  ```yaml
  # stacks/catalog/spacelift/worker-pool.yaml
  components:
    terraform:
      spacelift/worker-pool:
        settings:
          spacelift:
            administrative: true
            space_name: root
        vars:
          enabled: true
          spacelift_api_endpoint: https://<GITHUBORG>.app.spacelift.io
          spacelift_spaces_tenant_name: "acme"
          spacelift_spaces_environment_name: "gbl"
          spacelift_spaces_stage_name: "root"
          account_map_tenant_name: core
          ecr_environment_name: ue1
          ecr_repo_name: infrastructure
          ecr_stage_name: artifacts
          ecr_tenant_name: core
          # Set a low scaling threshold to ensure new workers are launched as soon as the current one(s) are busy
          cpu_utilization_high_threshold_percent: 10
          cpu_utilization_low_threshold_percent: 5
          default_cooldown: 300
          desired_capacity: null
          health_check_grace_period: 300
          health_check_type: EC2
          infracost_enabled: true
          instance_type: t3.small
          max_size: 3
          min_size: 1
          name: spacelift-worker-pool
          scale_down_cooldown_seconds: 2700
          spacelift_agents_per_node: 1
          wait_for_capacity_timeout: 5m
          block_device_mappings:
            - device_name: "/dev/xvda"
              no_device: null
              virtual_name: null
              ebs:
                delete_on_termination: null
                encrypted: false
                iops: null
                kms_key_id: null
                snapshot_id: null
                volume_size: 100
                volume_type: "gp2"
  ```

  To connect to a worker via SSM Session Manager, use:

  ```bash
  aws ssm start-session --target <instance-id>
  ```

  ### Impacts on billing

  While scaling the workload for Spacelift, keep in mind that each agent connection counts against your quota of self-hosted workers. The number of EC2 instances you have running is not going to affect your Spacelift bill. For example, if you had 3 EC2 instances in your Spacelift worker pool, and you configured `spacelift_agents_per_node` to be `3`, you would see your Spacelift bill report 9 agents being run. Take care while configuring the worker pool for your Spacelift infrastructure.

  ## Configuration

  ### Docker Image on ECR

  Build and tag a Docker image for this repository and push to ECR. Ensure the account where this component is deployed has read-only access to the ECR repository.

  ### API Key

  Prior to deployment, the API key must exist in SSM. The key must have admin permissions.

  To generate the key, please follow [these instructions](https://docs.spacelift.io/integrations/api.html#spacelift-api-key-token). Once generated, write the API key ID and secret to the SSM key store at the following locations within the same AWS account and region where the Spacelift worker pool will reside.

  | Key     | SSM Path                | Type           |
  | ------- | ----------------------- | -------------- |
  | API ID  | `/spacelift/key_id`     | `SecureString` |
  | API Key | `/spacelift/key_secret` | `SecureString` |

  Hint: The API key ID is displayed as an upper-case, 16-character alphanumeric value next to the key name in the API key list.

  Save the keys using `chamber` using the correct profile for where the Spacelift worker pool is provisioned:

  ```
  AWS_PROFILE=acme-gbl-auto-admin chamber write spacelift key_id 1234567890123456
  AWS_PROFILE=acme-gbl-auto-admin chamber write spacelift key_secret abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz
  ```

  ### IAM configuration

  After provisioning the component, you must give the created instance role permission to assume the Spacelift worker role. This is done by adding `iam_role_arn` from the output to the `trusted_role_arns` list for the `spacelift` role in `aws-teams`.
references:
  - name: cloudposse/terraform-spacelift-cloud-infrastructure-automation
    description: Cloud Posse's related upstream component
    url: https://github.com/cloudposse/terraform-spacelift-cloud-infrastructure-automation
  - name: cloudposse/terraform-aws-components (spacelift-worker-pool)
    description: Cloud Posse's upstream component
    url: https://github.com/cloudposse/terraform-aws-components/tree/main/modules/spacelift-worker-pool
tags:
  - component/spacelift/worker-pool
  - layer/spacelift
  - provider/aws
  - provider/spacelift
# Categories of this project
categories:
  - component/spacelift/worker-pool
  - layer/spacelift
  - provider/aws
  - provider/spacelift
# License of this project
license: "APACHE2"
# Badges to display
badges:
  - name: Latest Release
    image: https://img.shields.io/github/release/cloudposse-terraform-components/aws-spacelift-worker-pool-asg.svg?style=for-the-badge
    url: https://github.com/cloudposse-terraform-components/aws-spacelift-worker-pool-asg/releases/latest
  - name: Slack Community
    image: https://slack.cloudposse.com/for-the-badge.svg
    url: https://slack.cloudposse.com
related:
  - name: "Cloud Posse Terraform Modules"
    description: Our collection of reusable Terraform modules used by our reference architectures.
    url: "https://docs.cloudposse.com/modules/"
  - name: "Atmos"
    description: "Atmos is like docker-compose but for your infrastructure"
    url: "https://atmos.tools"
contributors: [] # If included generates contribs
